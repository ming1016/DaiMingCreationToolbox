name: x86-Windows-llvm-from-sources

on: 
  schedule:
    - cron:  '0 0 * * *'

jobs:
  build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v1
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Download Ninja
        run: |
          git clone git://github.com/ninja-build/ninja.git
          pushd ninja
          ./configure.py --bootstrap
          popd
      - name: Add Ninja to $PATH
        run: |
          echo "${GITHUB_WORKSPACE}/ninja" >> $GITHUB_PATH
      - name: Clone llvm-project
        run: |
          git clone --depth 1 --single-branch --branch release/13.x https://github.com/llvm/llvm-project
      - name: Build LLVM & Clang
        run: |
          cd llvm-project
          mkdir build
          cd build
          # cmake -G "Visual Studio 16 2019" -Thost=x64 `
          cmake -G Ninja `
            -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS=On `
            -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_OPTIMIZED_TABLEGEN=ON `
            -DCMAKE_BUILD_TYPE=MinSizeRel `
            ..\llvm
          # Note that only the required tools are built
          ninja clang opt lli not FileCheck
      - name: Install lit
        run: |
          pip3 install lit
      - name: Build HelloWorld
        run: |
          # Adding the location of Ninja to $PATH
          $env:Path += "$;GITHUB_WORKSPACE\llvm-project\build\bin\"
          cd HelloWorld
          copy-item -path CMakeLists.txt_for_windows -destination CMakeLists.txt
          mkdir build && cd build
          cmake -G Ninja -DLT_LLVM_INSTALL_DIR="${env:GITHUB_WORKSPACE}/llvm-project/build" ../
          ninja HelloWorld
          D:\a\llvm-tutor\llvm-tutor\llvm-project\build\bin\opt.exe -load HelloWorld.dll --legacy-hello-world -disable-output ..\..\test\hello.ll
